import type { NextPage } from 'next'
import dynamic from 'next/dynamic'
import Head from 'next/head'
import { useRouter } from 'next/router'
import { useContext, useEffect, useState } from 'react'
import { WebsocketContext } from '../../providers/WebSocketProvider'
import { ServerMessage } from '../../types'

const Chat: NextPage = () => {
  const { connection, sendMsg } = useContext(WebsocketContext);
  const router = useRouter();
  const code = router.query.code;
  const [messages, setMessages] = useState<Array<{ text: string; fromMe: boolean; }>>([]);
  useEffect(() => {
        if (code != null && sendMsg != null) {
            sendMsg({ message: 'RECONNECT', payload: { code, isEvaluator: true}});
        }
    }, [code, sendMsg]);
  useEffect(() => {
    const sub = connection!.subscribe((msg) => {
        console.log(msg);
      const message = msg as ServerMessage;
      if (message.message === 'NEW_MESSAGE') {
        setMessages((msgs) => [...msgs, { text: message.payload.text, fromMe: true}])
      }
    });

    return () => sub.unsubscribe();
  }, [router, code, connection]);

  return (
    <div>
      <Head>
        <title>Turing Test</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      Chat
      <div style={{ display: 'flex', flexDirection: 'column'}}>
          { messages.map(({ text, fromMe }, idx) => (
              <div key={idx}>{text}</div>
          ))}
      </div>
      <button onClick={() => sendMsg({ message: 'MESSAGE', payload: { code, fromEvaluator: true, text: 'elo123'}})}>Send Msg</button>
    </div>
  );
}

export default dynamic(() => Promise.resolve(Chat), { ssr: false });
